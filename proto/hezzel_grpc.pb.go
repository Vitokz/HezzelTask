// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HezzelUsersClient is the client API for HezzelUsers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HezzelUsersClient interface {
	AddUser(ctx context.Context, in *AddUserRequesst, opts ...grpc.CallOption) (*AddUserResponse, error)
	DeleteUSer(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	UserList(ctx context.Context, in *UserListRequest, opts ...grpc.CallOption) (*UserListResponse, error)
}

type hezzelUsersClient struct {
	cc grpc.ClientConnInterface
}

func NewHezzelUsersClient(cc grpc.ClientConnInterface) HezzelUsersClient {
	return &hezzelUsersClient{cc}
}

func (c *hezzelUsersClient) AddUser(ctx context.Context, in *AddUserRequesst, opts ...grpc.CallOption) (*AddUserResponse, error) {
	out := new(AddUserResponse)
	err := c.cc.Invoke(ctx, "/proto.HezzelUsers/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hezzelUsersClient) DeleteUSer(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, "/proto.HezzelUsers/DeleteUSer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hezzelUsersClient) UserList(ctx context.Context, in *UserListRequest, opts ...grpc.CallOption) (*UserListResponse, error) {
	out := new(UserListResponse)
	err := c.cc.Invoke(ctx, "/proto.HezzelUsers/UserList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HezzelUsersServer is the client API for HezzelUsers service.
// All implementations must embed UnimplementedHezzelUsersServer
// for forward compatibility
type HezzelUsersServer interface {
	AddUser(context.Context, *AddUserRequesst) (*AddUserResponse, error)
	DeleteUSer(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	UserList(context.Context, *UserListRequest) (*UserListResponse, error)
	mustEmbedUnimplementedHezzelUsersServer()
}

// UnimplementedHezzelUsersServer must be embedded to have forward compatible implementations.
type UnimplementedHezzelUsersServer struct {
}

func (UnimplementedHezzelUsersServer) AddUser(context.Context, *AddUserRequesst) (*AddUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedHezzelUsersServer) DeleteUSer(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUSer not implemented")
}
func (UnimplementedHezzelUsersServer) UserList(context.Context, *UserListRequest) (*UserListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserList not implemented")
}
func (UnimplementedHezzelUsersServer) mustEmbedUnimplementedHezzelUsersServer() {}

// UnsafeHezzelUsersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HezzelUsersServer will
// result in compilation errors.
type UnsafeHezzelUsersServer interface {
	mustEmbedUnimplementedHezzelUsersServer()
}

func RegisterHezzelUsersServer(s grpc.ServiceRegistrar, srv HezzelUsersServer) {
	s.RegisterService(&HezzelUsers_ServiceDesc, srv)
}

func _HezzelUsers_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserRequesst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HezzelUsersServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HezzelUsers/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HezzelUsersServer).AddUser(ctx, req.(*AddUserRequesst))
	}
	return interceptor(ctx, in, info, handler)
}

func _HezzelUsers_DeleteUSer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HezzelUsersServer).DeleteUSer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HezzelUsers/DeleteUSer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HezzelUsersServer).DeleteUSer(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HezzelUsers_UserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HezzelUsersServer).UserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HezzelUsers/UserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HezzelUsersServer).UserList(ctx, req.(*UserListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HezzelUsers_ServiceDesc is the grpc.ServiceDesc for HezzelUsers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HezzelUsers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.HezzelUsers",
	HandlerType: (*HezzelUsersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUser",
			Handler:    _HezzelUsers_AddUser_Handler,
		},
		{
			MethodName: "DeleteUSer",
			Handler:    _HezzelUsers_DeleteUSer_Handler,
		},
		{
			MethodName: "UserList",
			Handler:    _HezzelUsers_UserList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/hezzel.proto",
}
